generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  email           String   @unique
  password        String
  profilePic      String?
  role            Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  referralCode    String?  @unique
  referredById    String?  @db.Uuid
  referredBy      User?    @relation("Referral", fields: [referredById], references: [id])
  referredUsers   User[]   @relation("Referral")
  pointsBalance   Int      @default(0)
 

  @@map("users")
  events          Event[]     @relation("OrganizedEvents")
  transactions    Transaction[]
  ticketPurchases TicketPurchase[]
  points          Point[]
  reviews         Review[]
  referralsUsed   Referral[]  @relation("UsedBy")
  referralsOwned  Referral[]  @relation("Referred")
  discounts       Discount[]

  }

  enum Role {
  ATTENDEE
  ORGANIZER
}

model Event {
  id           String   @id @default(uuid()) @db.Uuid
  organizerId  String   @db.Uuid
  title        String
  description  String
  date         DateTime
  time         DateTime
  location     String
  image        String?
  eventCategory EventCategory
  eventType    EventType
  totalSeats   Int
  createdAt    DateTime @default(now())

 @@map("events")

  organizer    User     @relation("OrganizedEvents", fields: [organizerId], references: [id])
  tickets      TicketType[]
  transactions Transaction[]
  promotions   Promotion[]
  reviews      Review[]

  }

enum EventType {
  FREE
  PAID  
}

enum EventCategory {
  MUSIC
  NIGHTLIFE
  ARTS
  HOLIDAYS
  EDUCATION
  HOBBIES
  BUSINESS
  FOOD_AND_DRINK
}

model TicketType {
  id        String   @id @default(uuid()) @db.Uuid
  eventId   String   @db.Uuid
  name      String
  price     Int
  quota     Int

  @@map("ticket_types")

  event     Event     @relation(fields: [eventId], references: [id])
  purchases TicketPurchase[]
  items     TransactionItem[]
}

model TicketPurchase {
  id            String   @id @default(uuid()) @db.Uuid
  transactionId String   @db.Uuid
  attendeeId    String   @db.Uuid
  ticketTypeId  String   @db.Uuid
  quantity      Int
  createdAt     DateTime @default(now())

  @@map("ticket_purchases")

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  attendee      User        @relation(fields: [attendeeId], references: [id])
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
}

model Transaction {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  eventId        String   @db.Uuid
  totalPrice     Int
  appliedDiscount Int
  usedPoints     Int
  finalPrice     Int
  paymentStatus  PaymentStatus
  createdAt      DateTime @default(now())

  @@map("transactions")

  user           User     @relation(fields: [userId], references: [id])
  event          Event    @relation(fields: [eventId], references: [id])
  items          TransactionItem[]
  ticketPurchases TicketPurchase[]
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model TransactionItem {
  id            String   @id @default(uuid()) @db.Uuid
  transactionId String   @db.Uuid
  ticketTypeId  String   @db.Uuid
  quantity      Int
  subtotal      Int

  @@map("transaction_items")

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
}

model Promotion {
  id            String   @id @default(uuid()) @db.Uuid
  eventId       String   @db.Uuid
  type          PromoType
  value         Int
  valueType     PromoValueType
  usageLimit    Int
  startDate     DateTime
  endDate       DateTime
  voucherCode   String?
  isActive      Boolean  @default(true)

  event         Event    @relation(fields: [eventId], references: [id])
}

enum PromoType {
  VOUCHER
  REFERRAL
  POINTS_REDEMPTION
}

enum PromoValueType {
  PERCENTAGE
  FIXED
}

model Referral {
  id                 String   @id @default(uuid()) @db.Uuid
  usedById           String   @db.Uuid
  referredUserId     String   @db.Uuid
  referralCodeUsed   String
  createdAt          DateTime @default(now())

   @@map("referrals")

  usedBy             User     @relation("UsedBy", fields: [usedById], references: [id])
  referredUser       User     @relation("Referred", fields: [referredUserId], references: [id])
}

model Point {
  id                  String       @id @default(uuid()) @db.Uuid
  userId              String       @db.Uuid
  amount              Int
  source              PointSource
  usedInTransactionId String?      @db.Uuid
  expiresAt           DateTime
  createdAt           DateTime     @default(now())
  redeemed            Boolean      @default(false)

  @@map("points")

  user                User         @relation(fields: [userId], references: [id])
}

enum PointSource {
  REFERRAL
  REDEMPTION
}
model Review {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @db.Uuid
  userId      String   @db.Uuid
  rating      Int
  comment     String
  isVisible   Boolean  @default(true)
  createdAt   DateTime @default(now())
  

  @@map("reviews")

  user        User     @relation(fields: [userId], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])
}

model Discount {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @db.Uuid
  percentage  Float    
  expiredAt   DateTime
  isUsed      Boolean  @default(false)


  @@map("discounts")
  user    User   @relation(fields: [userId], references: [id])
}
